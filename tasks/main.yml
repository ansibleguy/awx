---

- name: Ansible AWX | Installing docker
  ansible.builtin.import_role:
    name: ansibleguy.infra_docker_minimal
  vars:
    docker:
      compose: true

- name: Ansible AWX | Installing docker
  ansible.builtin.import_role:
    name: ansibleguy.infra_nginx
  vars:
    nginx:
      sites:
        awx: "{{ defaults_aw.nginx | combine(AWX_CONFIG.nginx, recursive=true) }}"

- name: Ansible AWX | Adding ansible repository-key
  ansible.builtin.apt_key:
    keyserver: "{{ ansible.repo_key }}"
    id: "{{ ansible.repo_key_id }}"

- name: Ansible AWX | Add ansible repository
  ansible.builtin.apt_repository:
    repo: "deb {{ ansible.repo_url }} {{ ansible.version_matching[ansible_distribution_release | lower] }} main"

- name: Ansible AWX | Installing ansible
  ansible.builtin.apt:
    name: 'ansible'
    state: present

- name: Ansible AWX | Adding service files
  ansible.builtin.template:
    src: "templates/etc/systemd/system/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ AWX_CONFIG.service_prefix }}{{ item }}"
    owner: 'root'
    group: 'root'
    mode: 0755
  loop:
    - 'ansible-awx.service'
    - 'backup-ansible-awx.service'
    - 'backup-ansible-awx.timer'

- name: Ansible AWX | Copying backup script
  ansible.builtin.template:
    src: 'templates/usr/local/sbin/backup_ansible_awx.sh.j2'
    dest: '/usr/local/sbin/backup_ansible_awx.sh'
    owner: 'root'
    group: 'root'
    mode: 0755
  when: AWX_CONFIG.backup

- name: Ansible AWX  | Enabling/Starting backup timer
  ansible.builtin.systemd:
    daemon_reload: yes
    name: "{{ AWX_CONFIG.service_prefix }}backup-ansible-awx.timer"
    enabled: yes
    state: started
  when: AWX_CONFIG.backup

- name: Ansible AWX  | Enabling startup service
  ansible.builtin.systemd:
    daemon_reload: yes
    name: "{{ AWX_CONFIG.service_prefix }}ansible-awx.service"
    enabled: yes

- name: Ansible AWX | Checking if AWX can be found
  ansible.builtin.stat:
    path: "{{ AWX_CONFIG.path }}"
  register: awx_lib

- name: Ansible AWX | Installing
  ansible.builtin.import_tasks: install.yml
  when: >
    AWX_CONFIG.install or
    not awx_lib.stat.exists
